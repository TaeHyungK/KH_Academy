<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
						http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
						http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">
	
	<!-- 프로퍼티 이름을 이용한 의존 관계 자동 설정 -->
	<bean name="writeArticleService" class="kr.spring.ch13.WriteArticleService" autowire="byName"/>
	<bean name="writeArticleDao" class="kr.spring.ch13.WriteArticleDao"/>
	
	<!-- 프로퍼티 타입을 이용한 의존 관계 자동 설정 -->
	<bean name="" class="kr.spring.ch14.SystemMonitor" autowire="byType"/>
	<bean name="phoneCall" class="kr.spring.ch14.PhoneCall"/>
	<!-- byType을 사용할 경우 동일한 타입의 객체가 존재하면 오류 발생 -->
	<!-- <bean name="phoneCall2" class="kr.spring.ch14.PhoneCall"/> -->
	
	<!-- 부모 빈을 통한 설정 재사용 -->
	<!-- 
	<bean>태그의 abstract 속성 값을 true로 지정하면 스프링 컨테이너는 해당 빈 객체를 생성하지 않음
	 -->
	<bean id="commonMonitor" class="kr.spring.ch15.SystemMonitor" abstract="true">
		<property name="periodTime" value="10"/>
		<property name="sender" ref="smsSender"/>
	</bean>
	<bean id="smsSender" class="kr.spring.ch15.SmsSender"/>
	
	<bean id="doorMonitor" parent="commonMonitor"/>
	<bean id="lobbyMonitor" parent="commonMonitor"/>
	<bean id="roomMonitor" parent="commonMonitor">
		<property name="periodTime" value="20"/>
	</bean>
	
	<!-- singleton과 prototytpe -->
	<!-- singletno -->
	<bean id="worker" class="kr.spring.ch16.Worker"/>
	<!-- prototype -->
	<bean id="workerA" class="kr.spring.ch16.WorkerA" scope="prototype"/>
	
	<!-- 서로 다른 범위의 빈에 대한 의존 처리 -->
	<bean id="executor" class="kr.spring.ch16.Executor">
		<property name="workerB" ref="workerB"/>
	</bean>
	<bean id="workerB" class="kr.spring.ch16.WorkerB" scope="prototype">
		<!-- 
		Executor 클래스는 전달받은 workerB 프로퍼티가 prototype 범위의 빈 객체임에도 불구하고,
		매번 새로운 WorkerB 객체를 사용하는 것이 아니라 1개의 WorkerB 객체만 사용하게 됨.
		따라서 prototype 범위의 빈 객체가 singleton 범위의 빈 객체로부터 참조되는 경우,
		<aop:scoped-proxy/> 태그를 이용해서 올바르게 범위가 적용되도록 처리
		-->
		<aop:scoped-proxy/>
	</bean>
</beans>
